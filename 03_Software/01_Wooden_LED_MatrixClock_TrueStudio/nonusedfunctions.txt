	RTC_TimeTypeDef Time;
	static TIME time[2];
	static TIME *TimeOldData=&time[0];
	static TIME *TimeNewData=&time[1];
	volatile uint16_t ArrayForRotating[36];
	for(uint8_t i=0;i<36;i++){
		ArrayForRotating[i]=0x0000;
	}
	volatile uint8_t	CharArray[6];
	while(1){
		HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
		HAL_RTC_GetDate(&hrtc, NULL, RTC_FORMAT_BIN);
		RTC_Data.sec=Time.Seconds;
		RTC_Data.min=Time.Minutes;
		RTC_Data.hour=Time.Hours;

		TimeNewData->hour_tens=Time.Hours/10;
		TimeNewData->hour_singles=Time.Hours%10;

		TimeNewData->min_tens=Time.Minutes/10;
		TimeNewData->min_singles=Time.Minutes%10;

		TimeNewData->sec_tens=Time.Seconds/10;
		TimeNewData->sec_singles=Time.Seconds%10;

		CharArray[0]=TimeNewData->hour_tens+'0';
		CharArray[1]=TimeNewData->hour_singles+'0';
		CharArray[2]=TimeNewData->min_tens+'0';
		CharArray[3]=TimeNewData->min_singles+'0';
		CharArray[4]=TimeNewData->sec_tens+'0';
		CharArray[5]=TimeNewData->sec_singles+'0';

		for(uint8_t i=0;i<6;i++){

			for(uint8_t j=0;j<6;j++){
				ArrayForRotating[(i*6)+j]&=0xFF00;
				ArrayForRotating[(i*6)+j]|=BitSwapping(characters[CharArray[i]][j]);
			}
		}
		for(uint8_t i=0;i<8;i++){
			for(uint8_t j=0;j<36;j++){
				ArrayForRotating[j]<<=1;
			}
		}
		TIME *tmp=TimeOldData;
		TimeOldData=TimeNewData;
		TimeNewData=tmp;
	}

	MASKBYTE.B0=MASKBYTE.B1=MASKBYTE.B2=MASKBYTE.B3=MASKBYTE.B4=MASKBYTE.B5=0;

	if (time[0].sec_singles!=time[1].sec_singles) MASKBYTE.B0=1;
	if (time[0].sec_tens!=time[1].sec_tens) MASKBYTE.B1=1;
	if (time[0].min_singles!=time[1].min_singles) MASKBYTE.B2=1;
	if (time[0].min_tens!=time[1].min_tens) MASKBYTE.B3=1;
	if (time[0].hour_singles!=time[1].hour_singles) MASKBYTE.B4=1;
	if (time[0].hour_tens!=time[1].hour_tens) MASKBYTE.B5=1;



/*
	if(!MASKBYTE.B0&&!MASKBYTE.B1&&!MASKBYTE.B2&&!MASKBYTE.B3&&!MASKBYTE.B4&&!MASKBYTE.B5){
		//ez helyett vagy kéne
	}
	else{
		for(int j=0;j<8;j++){
			if(MASKBYTE.B0){for(char i=0;i<6;i++){datatmp[90+i]=concat(datatmp[42+i],datatmp[90+i]);}}
			if(MASKBYTE.B1){for(char i=0;i<6;i++){datatmp[84+i]=concat(datatmp[36+i],datatmp[84+i]);}}
			if(MASKBYTE.B2){for(char i=0;i<6;i++){datatmp[72+i]=concat(datatmp[24+i],datatmp[72+i]);}}
			if(MASKBYTE.B3){for(char i=0;i<6;i++){datatmp[66+i]=concat(datatmp[18+i],datatmp[66+i]);}}
			if(MASKBYTE.B4){for(char i=0;i<6;i++){datatmp[54+i]=concat(datatmp[6+i],datatmp[54+i]);}}
			if(MASKBYTE.B5){for(char i=0;i<6;i++){datatmp[48+i]=concat(datatmp[i],datatmp[48+i]);}}
			for(char i=0;i<48;i++){datatmp[i]>>=1;}
			copy(0,48,48);
		}
	}
	time[1]=time[0];*/


/*	for (uint8_t i = 0; i < 24; i++) {							//Üres helyek
		DisplayData[i] = DisplayData[i + 72] = 0;
	}
	for (uint8_t i = 0; i < 6; i++) {							//Kettõspontok
		DisplayData[i + 36] = DisplayData[i + 54] = BitSwapping(
				characters[':'][i]);
	}
	for (uint8_t i = 0; i < 12; i++) {
		DisplayData[i + 24] = *(OldDataPtr + i);
		DisplayData[i + 42] = *(OldDataPtr + i + 12);
		DisplayData[i + 60] = *(OldDataPtr + i + 24);
	}*/